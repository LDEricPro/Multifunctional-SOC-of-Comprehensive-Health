<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\m3_for_arty_a7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\m3_for_arty_a7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sat May 29 20:57:41 2021
<BR><P>
<H3>Maximum Stack Usage =       1080 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; EXIN_HMI_Handle &rArr; EXIN_NOLINER_Calculate &rArr; EXIN_NOLINER_Cal &rArr; __aeabi_ddiv
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[76]">atomic_test</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[18]">GPIO2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">GPIO2_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">BusFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[15]">DAPLinkFittedn</a> from main.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[12]">DAP_QSPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[14]">DAP_QSPI_XIP_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[13]">DAP_SPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[f]">GPIO0_Handler</a> from gpio.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[10]">GPIO1_Handler</a> from gpio.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[18]">GPIO2_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[11]">QSPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[8c]">RecvHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[93]">RecvHandler_1</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[34]">Reset_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[90]">SendHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[94]">SendHandler_1</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[31]">StubHandler</a> from xuartlite.o(.text) referenced from xuartlite.o(.text)
 <LI><a href="#[30]">StubStatusHandler</a> from xspi.o(.text) referenced from xspi.o(.text)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2e]">SystemInit</a> from system_arty_cm3.o(.text) referenced from startup_arty_cm3.o(.text)
 <LI><a href="#[e]">UART0_Handler</a> from uart.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[16]">UART1_Handler</a> from uart.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[17]">UART2_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[19]">Unused_IRQ11</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1a]">Unused_IRQ12</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1b]">Unused_IRQ13</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1c]">Unused_IRQ14</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1d]">Unused_IRQ15</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1e]">Unused_IRQ16</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1f]">Unused_IRQ17</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[20]">Unused_IRQ18</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[21]">Unused_IRQ19</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[22]">Unused_IRQ20</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[23]">Unused_IRQ21</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[24]">Unused_IRQ22</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[25]">Unused_IRQ23</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[26]">Unused_IRQ24</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[27]">Unused_IRQ25</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[28]">Unused_IRQ26</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[29]">Unused_IRQ27</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2a]">Unused_IRQ28</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2b]">Unused_IRQ29</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2c]">Unused_IRQ30</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2d]">Unused_IRQ31</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[35]">__main</a> from __main.o(!!!main) referenced from startup_arty_cm3.o(.text)
 <LI><a href="#[33]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[32]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[37]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[39]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[131]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[132]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[133]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[134]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3a]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[fe]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3c]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[41]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[135]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[4a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[136]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[137]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[43]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[138]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[139]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[45]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[13e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[140]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[141]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[142]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[143]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[144]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[145]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[146]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[147]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[148]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[149]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[150]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[151]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[38]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[152]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[47]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[49]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[153]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; EXIN_HMI_Handle &rArr; EXIN_NOLINER_Calculate &rArr; EXIN_NOLINER_Cal &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[154]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[10c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[155]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[50]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[156]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm3.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))

<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GPIO2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Unused_IRQ11</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Unused_IRQ12</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Unused_IRQ13</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Unused_IRQ14</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Unused_IRQ15</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Unused_IRQ16</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Unused_IRQ17</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Unused_IRQ18</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Unused_IRQ19</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Unused_IRQ20</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Unused_IRQ21</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Unused_IRQ22</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Unused_IRQ23</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Unused_IRQ24</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Unused_IRQ25</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Unused_IRQ26</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Unused_IRQ27</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Unused_IRQ28</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>Unused_IRQ29</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>Unused_IRQ30</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Unused_IRQ31</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[52]"></a>outbyte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, outbyte.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[54]"></a>print</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>Xil_Assert</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xil_assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StubHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetStatusHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_GetSlaveSelect
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StubStatusHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetEnabled
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalDisable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_GetDataDirection
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_GetStats
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_DisableInterrupt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ClearStats
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ResetFifos
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
</UL>

<P><STRONG><a name="[157]"></a>Xil_AssertSetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>XNullHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 2072 bytes, Stack size 352 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = main &rArr; EXIN_HMI_Handle &rArr; EXIN_NOLINER_Calculate &rArr; EXIN_NOLINER_Cal &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_access
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BT_PutChar
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BT_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts_1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MAXMIN_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_IO_PRINTER_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HEART_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_GPIO_CAM_Set
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_BEEP_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_ADC_RCV
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_ADC_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSPIInterrupts
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15]"></a>DAPLinkFittedn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAPLinkFittedn
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>atomic_test</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, atomic_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_access
</UL>

<P><STRONG><a name="[63]"></a>atomic_access</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = atomic_access
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>InitialiseGPIO</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitialiseGPIO &rArr; XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>EnableGPIOInterrupts</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EnableGPIOInterrupts &rArr; XGpio_InterruptEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>GPIO0_Handler</STRONG> (Thumb, 64 bytes, Stack size 264 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = GPIO0_Handler &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DEBUG_String
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIO1_Handler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO1_Handler &rArr; XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SetDAPLinkQSPIMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>

<P><STRONG><a name="[81]"></a>IncLeds</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>

<P><STRONG><a name="[6f]"></a>EXIN_GPIO_CAM_Set</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXIN_GPIO_CAM_Set &rArr; XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_GPIO_SetMode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>EXIN_GPIO_SetMode</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXIN_GPIO_SetMode &rArr; EXIN_GPIO_CAM_Set &rArr; XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_GPIO_CAM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[5c]"></a>InitialiseSPI</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitialiseSPI &rArr; XSpi_Initialize &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>DisableSPIInterrupts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisableSPIInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>InitQSPIBaseFlash</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>WriteQSPIBaseFlash</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>ReadQSPIBaseFlash</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReadQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>WriteSPIData</STRONG> (Thumb, 248 bytes, Stack size 112 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[11]"></a>QSPI0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DAP_QSPI0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAP_QSPI0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DAP_SPI0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAP_SPI0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DAP_QSPI_XIP_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAP_QSPI_XIP_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>RecvHandler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RecvHandler &rArr; XUartLite_Send &rArr; XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>SendHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>InitialiseUART</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitialiseUART &rArr; XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>RecvHandler_1</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RecvHandler_1 &rArr; XUartLite_Recv &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>SendHandler_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>InitialiseUART_1</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitialiseUART_1 &rArr; XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>CheckUARTRxBytes</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>EnableUARTInterrupts</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableUARTInterrupts &rArr; XUartLite_EnableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>EnableUARTInterrupts_1</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableUARTInterrupts_1 &rArr; XUartLite_EnableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>UART_HMI_Send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_HMI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
</UL>

<P><STRONG><a name="[97]"></a>UART_HMI_PutChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>

<P><STRONG><a name="[98]"></a>UART_HMI_instru_send</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_HMI_instru_send
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_SleepCheck
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Calculate
</UL>

<P><STRONG><a name="[99]"></a>UART_HMI_DEBUGinstru_send</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_HMI_DEBUGinstru_send
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[7d]"></a>UART_DEBUG_String</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DEBUG_String
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Test
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Calculate
</UL>

<P><STRONG><a name="[9a]"></a>UART_DEBUG_PutChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>

<P><STRONG><a name="[9b]"></a>UART_DEBUG_Send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>

<P><STRONG><a name="[e]"></a>UART0_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART0_Handler &rArr; XUartLite_InterruptHandler &rArr; ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART1_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART1_Handler &rArr; XUartLite_InterruptHandler &rArr; ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>XGpio_CfgInitialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
</UL>

<P><STRONG><a name="[78]"></a>XGpio_SetDataDirection</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_SetDataDirection &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[a1]"></a>XGpio_GetDataDirection</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[7c]"></a>XGpio_DiscreteRead</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_DiscreteRead &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncLeds
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_GPIO_CAM_Set
</UL>

<P><STRONG><a name="[79]"></a>XGpio_DiscreteWrite</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncLeds
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDAPLinkQSPIMode
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_GPIO_CAM_Set
</UL>

<P><STRONG><a name="[7b]"></a>XGpio_InterruptGlobalEnable</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_InterruptGlobalEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
</UL>

<P><STRONG><a name="[a3]"></a>XGpio_InterruptGlobalDisable</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[7a]"></a>XGpio_InterruptEnable</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_InterruptEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
</UL>

<P><STRONG><a name="[a5]"></a>XGpio_InterruptDisable</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[7e]"></a>XGpio_InterruptClear</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[a6]"></a>XGpio_InterruptGetEnabled</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[a7]"></a>XGpio_InterruptGetStatus</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[a8]"></a>XGpio_LookupConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, xgpio_sinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
</UL>

<P><STRONG><a name="[77]"></a>XGpio_Initialize</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xgpio_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_LookupConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[a9]"></a>XSpi_Abort</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
</UL>

<P><STRONG><a name="[84]"></a>XSpi_Reset</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XSpi_Reset &rArr; XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[ac]"></a>XSpi_CfgInitialize</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
</UL>

<P><STRONG><a name="[85]"></a>XSpi_Start</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XSpi_Start &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[ad]"></a>XSpi_Stop</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[89]"></a>XSpi_Transfer</STRONG> (Thumb, 872 bytes, Stack size 48 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
</UL>

<P><STRONG><a name="[87]"></a>XSpi_SetSlaveSelect</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XSpi_SetSlaveSelect &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[ae]"></a>XSpi_GetSlaveSelect</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[af]"></a>XSpi_SetStatusHandler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b0]"></a>XSpi_InterruptHandler</STRONG> (Thumb, 630 bytes, Stack size 40 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b1]"></a>XSpi_LookupConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, xspi_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XSpi_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
</UL>

<P><STRONG><a name="[83]"></a>XSpi_Initialize</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xspi_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XSpi_Initialize &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; XSpi_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_LookupConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[b2]"></a>XUartLite_CfgInitialize</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ClearStats
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>

<P><STRONG><a name="[b5]"></a>XUartLite_SendBuffer</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandler
</UL>

<P><STRONG><a name="[8d]"></a>XUartLite_Send</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XUartLite_Send &rArr; XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvHandler
</UL>

<P><STRONG><a name="[b7]"></a>XUartLite_ReceiveBuffer</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataHandler
</UL>

<P><STRONG><a name="[8e]"></a>XUartLite_Recv</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XUartLite_Recv &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvHandler_1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[b8]"></a>XUartLite_ResetFifos</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b9]"></a>XUartLite_IsSending</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[92]"></a>XUartLite_SetRecvHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XUartLite_SetRecvHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[91]"></a>XUartLite_SetSendHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XUartLite_SetSendHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[9c]"></a>XUartLite_InterruptHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XUartLite_InterruptHandler &rArr; ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[bc]"></a>XUartLite_DisableInterrupt</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, xuartlite_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>

<P><STRONG><a name="[95]"></a>XUartLite_EnableInterrupt</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_EnableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts_1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts
</UL>

<P><STRONG><a name="[53]"></a>XUartLite_SendByte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xuartlite_l.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DEBUG_Send
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DEBUG_PutChar
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HMI_DEBUGinstru_send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HMI_instru_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HMI_PutChar
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HMI_Send
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DEBUG_String
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>

<P><STRONG><a name="[15a]"></a>XUartLite_RecvByte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xuartlite_l.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>XUartLite_LookupConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, xuartlite_sinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>

<P><STRONG><a name="[8f]"></a>XUartLite_Initialize</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xuartlite_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_LookupConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[bf]"></a>XUartLite_GetStats</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, xuartlite_stats.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b4]"></a>XUartLite_ClearStats</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, xuartlite_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
</UL>

<P><STRONG><a name="[6d]"></a>EXIN_TIMER_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, exin_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_TIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>EXIN_TIMER_Delayus</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, exin_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_TIMER_Delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BT_String
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_SleepCheck
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_BEEP
</UL>

<P><STRONG><a name="[c3]"></a>EXIN_TIMER_Read</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, exin_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_TIMER_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[c4]"></a>EXIN_TIMER_GetTime</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, exin_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_TIMER_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[6b]"></a>EXIN_BEEP_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, exin_beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_BEEP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>EXIN_BEEP</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, exin_beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXIN_BEEP &rArr; EXIN_TIMER_Delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[68]"></a>EXIN_MPU_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, exin_mpu6050_gyxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_MPU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>EXIN_MPU_Deal</STRONG> (Thumb, 864 bytes, Stack size 48 bytes, exin_mpu6050_gyxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXIN_MPU_Deal &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>EXIN_ADC_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exin_adc0832.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>EXIN_ADC_RCV</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exin_adc0832.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>EXIN_MAXMIN_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exin_maxmin2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_MAXMIN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>EXIN_MAXMIN_Get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, exin_maxmin2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[d5]"></a>EXIN_DHT_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exin_dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_DHT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[d7]"></a>EXIN_DHT_Read</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, exin_dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_DHT_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[6a]"></a>EXIN_HEART_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exin_heartfre2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_HEART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>EXIN_HEART_Rcv</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, exin_heartfre2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[15b]"></a>EXIN_heart_in</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, exin_heartfre2.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>EXIN_HEART_Check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, exin_heartfre2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[f3]"></a>BREATH_LED_Light</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, breath_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[de]"></a>EXIN_STEPCOUNTER_Get</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, exin_stepcounter_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXIN_STEPCOUNTER_Get &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[e2]"></a>EXIN_NOLINER_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exin_noliner2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>

<P><STRONG><a name="[e4]"></a>EXIN_NOLINER_Cal</STRONG> (Thumb, 360 bytes, Stack size 320 bytes, exin_noliner2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = EXIN_NOLINER_Cal &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Calculate
</UL>

<P><STRONG><a name="[e8]"></a>EXIN_NOLINER_Calculate</STRONG> (Thumb, 326 bytes, Stack size 272 bytes, exin_noliner2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = EXIN_NOLINER_Calculate &rArr; EXIN_NOLINER_Cal &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HMI_instru_send
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DEBUG_String
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[e9]"></a>EXIN_NOLINER_Test</STRONG> (Thumb, 82 bytes, Stack size 264 bytes, exin_noliner2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DEBUG_String
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
</UL>

<P><STRONG><a name="[6e]"></a>EXIN_IO_PRINTER_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, exin_io_printer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_IO_PRINTER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>EXIN_IO_PRINTER_Print</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, exin_io_printer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXIN_IO_PRINTER_Print
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[6c]"></a>screen_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, exin_hmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>screen_PAGE_clr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, exin_hmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[ef]"></a>POW_10</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, exin_hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POW_10
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
</UL>

<P><STRONG><a name="[ec]"></a>DIV_10</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, exin_hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DIV_10 &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
</UL>

<P><STRONG><a name="[70]"></a>instru_deal</STRONG> (Thumb, 544 bytes, Stack size 104 bytes, exin_hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = instru_deal &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HMI_Send
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_10
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POW_10
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>EXIN_SleepCheck</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, exin_hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = EXIN_SleepCheck &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HMI_instru_send
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[72]"></a>EXIN_HMI_Handle</STRONG> (Thumb, 5282 bytes, Stack size 104 bytes, exin_hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = EXIN_HMI_Handle &rArr; EXIN_NOLINER_Calculate &rArr; EXIN_NOLINER_Cal &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HMI_DEBUGinstru_send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HMI_instru_send
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_GPIO_SetMode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_ADC_RCV
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_SleepCheck
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_PAGE_clr
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_IO_PRINTER_Print
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Calculate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_STEPCOUNTER_Get
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BREATH_LED_Light
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HEART_Check
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_DHT_Read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_DHT_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MAXMIN_Get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_BEEP
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_GetTime
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_Read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_Delayus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>UART_BT_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exin_hmitx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_BT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>UART_BT_PutChar</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, exin_hmitx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_BT_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BT_String
</UL>

<P><STRONG><a name="[f9]"></a>UART_BT_String</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exin_hmitx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BT_PutChar
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_Delayus
</UL>

<P><STRONG><a name="[5f]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_SleepCheck
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Test
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Calculate
</UL>

<P><STRONG><a name="[109]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3d]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[40]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[15c]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[5e]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_SleepCheck
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Test
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Calculate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[166]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[fa]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[32]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[10a]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[42]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[44]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[104]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[107]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[100]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[167]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[168]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[112]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[51]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[169]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10e]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[10d]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[10f]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[110]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[102]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[103]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[111]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[106]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[fd]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[46]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_STEPCOUNTER_Get
</UL>

<P><STRONG><a name="[113]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[116]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[11c]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_STEPCOUNTER_Get
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HEART_Rcv
</UL>

<P><STRONG><a name="[119]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HEART_Rcv
</UL>

<P><STRONG><a name="[11a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HEART_Rcv
</UL>

<P><STRONG><a name="[16c]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_STEPCOUNTER_Get
</UL>

<P><STRONG><a name="[16d]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[11b]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[11f]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[11d]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[115]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[118]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[11e]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_STEPCOUNTER_Get
</UL>

<P><STRONG><a name="[120]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Calculate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_STEPCOUNTER_Get
</UL>

<P><STRONG><a name="[122]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
</UL>

<P><STRONG><a name="[124]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[12a]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_10
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
</UL>

<P><STRONG><a name="[126]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
</UL>

<P><STRONG><a name="[127]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_STEPCOUNTER_Get
</UL>

<P><STRONG><a name="[128]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_10
</UL>

<P><STRONG><a name="[16e]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instru_deal
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
</UL>

<P><STRONG><a name="[16f]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[129]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[12d]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_STEPCOUNTER_Get
</UL>

<P><STRONG><a name="[12b]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[123]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[114]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[12c]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HMI_Handle
</UL>

<P><STRONG><a name="[12e]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[3b]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[58]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAPLinkFittedn
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[8b]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_QSPI_XIP_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SPI0_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_QSPI0_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI0_Handler
</UL>

<P><STRONG><a name="[88]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
</UL>

<P><STRONG><a name="[86]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSPIInterrupts
</UL>

<P><STRONG><a name="[9d]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[a0]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xgpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>

<P><STRONG><a name="[a4]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xgpio_intr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetEnabled
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
</UL>

<P><STRONG><a name="[a2]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xgpio_intr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalDisable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
</UL>

<P><STRONG><a name="[30]"></a>StubStatusHandler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StubStatusHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xspi.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
</UL>

<P><STRONG><a name="[aa]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
</UL>

<P><STRONG><a name="[31]"></a>StubHandler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StubHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xuartlite.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xuartlite.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ResetFifos
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
</UL>

<P><STRONG><a name="[b3]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xuartlite.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ResetFifos
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
</UL>

<P><STRONG><a name="[ba]"></a>SendDataHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendDataHandler &rArr; XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>

<P><STRONG><a name="[bb]"></a>ReceiveDataHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>

<P><STRONG><a name="[bd]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xuartlite_intr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_DisableInterrupt
</UL>

<P><STRONG><a name="[c2]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_GetTime
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_Read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_Delayus
</UL>

<P><STRONG><a name="[c0]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_TIMER_Delayus
</UL>

<P><STRONG><a name="[c5]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_BEEP_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_BEEP
</UL>

<P><STRONG><a name="[c8]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_mpu6050_gyxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
</UL>

<P><STRONG><a name="[c7]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_mpu6050_gyxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MPU_Deal
</UL>

<P><STRONG><a name="[d3]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_adc0832.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_ADC_Init
</UL>

<P><STRONG><a name="[d4]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_maxmin2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_MAXMIN_Init
</UL>

<P><STRONG><a name="[d8]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_dht11.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_DHT_Read
</UL>

<P><STRONG><a name="[d6]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_dht11.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_DHT_Init
</UL>

<P><STRONG><a name="[d9]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_heartfre2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_HEART_Init
</UL>

<P><STRONG><a name="[df]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_stepcounter_debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_STEPCOUNTER_Get
</UL>

<P><STRONG><a name="[e6]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_noliner2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Test
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Calculate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
</UL>

<P><STRONG><a name="[e3]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_noliner2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Test
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Cal
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_NOLINER_Init
</UL>

<P><STRONG><a name="[ea]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_io_printer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_IO_PRINTER_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIN_IO_PRINTER_Print
</UL>

<P><STRONG><a name="[f8]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exin_hmitx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BT_PutChar
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BT_Init
</UL>

<P><STRONG><a name="[121]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[117]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[12f]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[125]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[ff]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[33]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
